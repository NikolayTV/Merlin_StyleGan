Traceback (most recent call last):
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/utils/cpp_extension.py", line 1515, in _run_ninja_build
    env=env)
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/subprocess.py", line 418, in run
    output=stdout, stderr=stderr)
subprocess.CalledProcessError: Command '['ninja', '-v']' returned non-zero exit status 1.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "main.py", line 17, in <module>
    from models.psp import pSp
  File "/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/psp.py", line 9, in <module>
    from models.encoders import psp_encoders
  File "/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/encoders/psp_encoders.py", line 8, in <module>
    from models.stylegan2.model import EqualLinear
  File "/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/model.py", line 7, in <module>
    from models.stylegan2.op import FusedLeakyReLU, fused_leaky_relu, upfirdn2d
  File "/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/__init__.py", line 1, in <module>
    from .fused_act import FusedLeakyReLU, fused_leaky_relu
  File "/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_act.py", line 13, in <module>
    os.path.join(module_path, 'fused_bias_act_kernel.cu'),
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/utils/cpp_extension.py", line 974, in load
    keep_intermediates=keep_intermediates)
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/utils/cpp_extension.py", line 1179, in _jit_compile
    with_cuda=with_cuda)
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/utils/cpp_extension.py", line 1279, in _write_ninja_file_and_build_library
    error_prefix="Error building extension '{}'".format(name))
  File "/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/utils/cpp_extension.py", line 1529, in _run_ninja_build
    raise RuntimeError(message)
RuntimeError: Error building extension 'fused': [1/3] c++ -MMD -MF fused_bias_act.o.d -DTORCH_EXTENSION_NAME=fused -DTORCH_API_INCLUDE_EXTENSION_H -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/TH -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/THC -isystem /home/nikolay/anaconda3/envs/psp_env/include/python3.6m -D_GLIBCXX_USE_CXX11_ABI=0 -fPIC -std=c++14 -c /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp -o fused_bias_act.o 
In file included from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/DeviceType.h:8:0,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/Device.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/Allocator.h:6,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ATen.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/all.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/extension.h:4,
                 from /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:1:
/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp: In function ‘at::Tensor fused_bias_act(const at::Tensor&, const at::Tensor&, const at::Tensor&, int, int, float, float)’:
/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:7:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]
 #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x " must be a CUDA tensor")
                                          ^
/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:13:5: note: in expansion of macro ‘CHECK_CUDA’
     CHECK_CUDA(input);
     ^~~~~~~~~~
In file included from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/Tensor.h:3:0,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/Context.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ATen.h:5,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/all.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/extension.h:4,
                 from /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:1:
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/core/TensorBody.h:268:30: note: declared here
   DeprecatedTypeProperties & type() const {
                              ^~~~
In file included from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/DeviceType.h:8:0,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/Device.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/core/Allocator.h:6,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ATen.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/all.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/extension.h:4,
                 from /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:1:
/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:7:42: warning: ‘at::DeprecatedTypeProperties& at::Tensor::type() const’ is deprecated: Tensor.type() is deprecated. Instead use Tensor.options(), which in many cases (e.g. in a constructor) is a drop-in replacement. If you were using data from type(), that is now available from Tensor itself, so instead of tensor.type().scalar_type(), use tensor.scalar_type() instead and instead of tensor.type().backend() use tensor.device(). [-Wdeprecated-declarations]
 #define CHECK_CUDA(x) TORCH_CHECK(x.type().is_cuda(), #x " must be a CUDA tensor")
                                          ^
/home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:14:5: note: in expansion of macro ‘CHECK_CUDA’
     CHECK_CUDA(bias);
     ^~~~~~~~~~
In file included from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/Tensor.h:3:0,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/Context.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ATen.h:5,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/types.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader_options.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/base.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader/stateful.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data/dataloader.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/data.h:3,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include/torch/all.h:4,
                 from /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/extension.h:4,
                 from /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act.cpp:1:
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/core/TensorBody.h:268:30: note: declared here
   DeprecatedTypeProperties & type() const {
                              ^~~~
[2/3] /usr/bin/nvcc -DTORCH_EXTENSION_NAME=fused -DTORCH_API_INCLUDE_EXTENSION_H -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/TH -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/THC -isystem /home/nikolay/anaconda3/envs/psp_env/include/python3.6m -D_GLIBCXX_USE_CXX11_ABI=0 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_61,code=sm_61 --compiler-options '-fPIC' -std=c++14 -c /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act_kernel.cu -o fused_bias_act_kernel.cuda.o 
FAILED: fused_bias_act_kernel.cuda.o 
/usr/bin/nvcc -DTORCH_EXTENSION_NAME=fused -DTORCH_API_INCLUDE_EXTENSION_H -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/api/include -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/TH -isystem /home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/THC -isystem /home/nikolay/anaconda3/envs/psp_env/include/python3.6m -D_GLIBCXX_USE_CXX11_ABI=0 -D__CUDA_NO_HALF_OPERATORS__ -D__CUDA_NO_HALF_CONVERSIONS__ -D__CUDA_NO_HALF2_OPERATORS__ --expt-relaxed-constexpr -gencode=arch=compute_61,code=sm_61 --compiler-options '-fPIC' -std=c++14 -c /home/nikolay/workspace/Merlin/stylegan_merlinapp_service/models/stylegan2/op/fused_bias_act_kernel.cu -o fused_bias_act_kernel.cuda.o 
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<at::Tensor, at::Tensor, at::Tensor>}; bool <anonymous> = true; _Elements = {at::Tensor, at::Tensor, at::Tensor}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor, at::Tensor, at::Tensor>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor, at::Tensor, at::Tensor>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor, at::Tensor, at::Tensor>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1396:58:   required from ‘constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...) [with _Elements = {const at::Tensor&, const at::Tensor&, const at::Tensor&}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ExpandUtils.h:93:58:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<at::Tensor, at::Tensor, at::Tensor>}; bool <anonymous> = true; _Elements = {at::Tensor, at::Tensor, at::Tensor}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor, at::Tensor, at::Tensor>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<at::Tensor, at::Tensor, at::Tensor>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), at::Tensor, at::Tensor, at::Tensor>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1396:58:   required from ‘constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...) [with _Elements = {const at::Tensor&, const at::Tensor&, const at::Tensor&}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ExpandUtils.h:93:58:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<at::Tensor, at::Tensor, at::Tensor>&; bool <anonymous> = true; _Elements = {at::Tensor, at::Tensor, at::Tensor}]’:
/usr/include/c++/6/tuple:662:419:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), at::Tensor, at::Tensor, at::Tensor>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {at::Tensor, at::Tensor, at::Tensor}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), at::Tensor, at::Tensor, at::Tensor>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1396:58:   required from ‘constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...) [with _Elements = {const at::Tensor&, const at::Tensor&, const at::Tensor&}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ExpandUtils.h:93:58:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<at::Tensor, at::Tensor, at::Tensor>&&; bool <anonymous> = true; _Elements = {at::Tensor, at::Tensor, at::Tensor}]’:
/usr/include/c++/6/tuple:686:422:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), at::Tensor, at::Tensor, at::Tensor>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {at::Tensor, at::Tensor, at::Tensor}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), at::Tensor, at::Tensor, at::Tensor>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), at::Tensor, at::Tensor, at::Tensor>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1396:58:   required from ‘constexpr std::tuple<typename std::__decay_and_strip<_Elements>::__type ...> std::make_tuple(_Elements&& ...) [with _Elements = {const at::Tensor&, const at::Tensor&, const at::Tensor&}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/ATen/ExpandUtils.h:93:58:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const c10::nullopt_t&}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const c10::nullopt_t&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = const c10::nullopt_t&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1067:8:   required from ‘struct std::__is_direct_constructible_new<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1075:8:   required from ‘struct std::__is_direct_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1115:8:   required from ‘struct std::__is_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1126:8:   required from ‘struct std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:333:77:   required by substitution of ‘template<class U, typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> > constexpr c10::optional<T>::optional(U&&) [with U = const c10::nullopt_t&; typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const c10::nullopt_t&}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const c10::nullopt_t&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = const c10::nullopt_t&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1067:8:   required from ‘struct std::__is_direct_constructible_new<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1075:8:   required from ‘struct std::__is_direct_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1115:8:   required from ‘struct std::__is_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/usr/include/c++/6/type_traits:1126:8:   required from ‘struct std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, const c10::nullopt_t&>’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:333:77:   required by substitution of ‘template<class U, typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> > constexpr c10::optional<T>::optional(U&&) [with U = const c10::nullopt_t&; typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:308:67:   required from ‘constexpr c10::optional<T>::optional(c10::nullopt_t) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:308:67:   required from ‘constexpr c10::optional<T>::optional(c10::nullopt_t) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:662:419:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:308:67:   required from ‘constexpr c10::optional<T>::optional(c10::nullopt_t) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1067:8:   required from ‘struct std::__is_direct_constructible_new<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1075:8:   required from ‘struct std::__is_direct_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1115:8:   required from ‘struct std::__is_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1126:8:   required from ‘struct std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:333:77:   required by substitution of ‘template<class U, typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> > constexpr c10::optional<T>::optional(U&&) [with U = c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >; typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1067:8:   required from ‘struct std::__is_direct_constructible_new<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1075:8:   required from ‘struct std::__is_direct_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1115:8:   required from ‘struct std::__is_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/usr/include/c++/6/type_traits:1126:8:   required from ‘struct std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >&&>’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:333:77:   required by substitution of ‘template<class U, typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> > constexpr c10::optional<T>::optional(U&&) [with U = c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >; typename std::enable_if<(((std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, U&&>::value && (! std::is_same<typename std::decay<_Tp>::type, c10::in_place_t>::value)) && (! std::is_same<typename std::decay<_Tp>::type, c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > >::value)) && std::is_convertible<U&&, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >::value), bool>::type <anonymous> = <missing>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1067:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>, std::__is_nt_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:1211:8:   required from ‘struct std::is_nothrow_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1242:8:   required from ‘struct std::__is_nothrow_move_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, true>’
/usr/include/c++/6/type_traits:1248:8:   required from ‘struct std::is_nothrow_move_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:317:1:   required from ‘c10::optional<T>::optional(c10::optional<T>&&) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>}; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (3ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1067:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>, std::__is_nt_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:1211:8:   required from ‘struct std::is_nothrow_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1242:8:   required from ‘struct std::__is_nothrow_move_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, true>’
/usr/include/c++/6/type_traits:1248:8:   required from ‘struct std::is_nothrow_move_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:317:1:   required from ‘c10::optional<T>::optional(c10::optional<T>&&) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&; bool <anonymous> = true; _Elements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}]’:
/usr/include/c++/6/tuple:686:422:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/type_traits:970:16:   required by substitution of ‘template<class _Tp, class _Arg, class> static std::true_type std::__do_is_direct_constructible_impl::__test(int) [with _Tp = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>; _Arg = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&; <template-parameter-1-3> = <missing>]’
/usr/include/c++/6/type_traits:981:40:   required from ‘struct std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_destructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >, std::__is_direct_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:985:8:   required from ‘struct std::__is_direct_constructible_new_safe<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1067:8:   [ skipping 4 instantiation contexts, use -ftemplate-backtrace-limit=0 to disable ]
/usr/include/c++/6/type_traits:143:8:   required from ‘struct std::__and_<std::is_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>, std::__is_nt_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&> >’
/usr/include/c++/6/type_traits:1211:8:   required from ‘struct std::is_nothrow_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>&&>’
/usr/include/c++/6/type_traits:1242:8:   required from ‘struct std::__is_nothrow_move_constructible_impl<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>, true>’
/usr/include/c++/6/type_traits:1248:8:   required from ‘struct std::is_nothrow_move_constructible<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> >’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:317:1:   required from ‘c10::optional<T>::optional(c10::optional<T>&&) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/frontend/source_range.h:147:13:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (4, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h: In member function ‘c10::optional<std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int> > torch::jit::SourceRange::file_line_col() const’:
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/c10/util/Optional.h:308:11: note:   after user-defined conversion: constexpr c10::optional<T>::optional(c10::nullopt_t) [with T = std::tuple<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, long unsigned int, long unsigned int>]
   constexpr optional(nullopt_t) noexcept : OptionalBase<T>(){};
           ^~~~~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_MoveConstructibleTuple() [with _UElements = {std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>}; bool <anonymous> = true; _Elements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}]’:
/usr/include/c++/6/tuple:626:248:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (4ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (4ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1545:43:   required from ‘constexpr std::tuple<_Elements& ...> std::tie(_Elements& ...) [with _Elements = {const c10::optional<signed char>, const c10::VaryingShape<long int>, const c10::VaryingShape<long int>, const c10::optional<bool>}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/utils/hash.h:135:58:   required from ‘size_t torch::get_hash(const Types& ...) [with Types = {c10::optional<signed char>, c10::VaryingShape<long int>, c10::VaryingShape<long int>, c10::optional<bool>}; size_t = long unsigned int]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/runtime/argument_spec.h:459:240:   required from here
/usr/include/c++/6/tuple:483:67: error: mismatched argument pack lengths while expanding ‘std::is_constructible<_Elements, _UElements&&>’
       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
                                                                   ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_ImplicitlyMoveConvertibleTuple() [with _UElements = {std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>}; bool <anonymous> = true; _Elements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}]’:
/usr/include/c++/6/tuple:626:362:   required by substitution of ‘template<class ... _UElements, typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (4ul >= 1)), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(_UElements&& ...) [with _UElements = {std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>}; typename std::enable_if<(((std::_TC<(sizeof... (_UElements) == 1), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NotSameTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>()) && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && (4ul >= 1)), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1545:43:   required from ‘constexpr std::tuple<_Elements& ...> std::tie(_Elements& ...) [with _Elements = {const c10::optional<signed char>, const c10::VaryingShape<long int>, const c10::VaryingShape<long int>, const c10::optional<bool>}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/utils/hash.h:135:58:   required from ‘size_t torch::get_hash(const Types& ...) [with Types = {c10::optional<signed char>, c10::VaryingShape<long int>, c10::VaryingShape<long int>, c10::optional<bool>}; size_t = long unsigned int]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/runtime/argument_spec.h:459:240:   required from here
/usr/include/c++/6/tuple:489:65: error: mismatched argument pack lengths while expanding ‘std::is_convertible<_UElements&&, _Elements>’
       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
                                                                 ^~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = const std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>&; bool <anonymous> = true; _Elements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}]’:
/usr/include/c++/6/tuple:662:419:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(const std::tuple<_Args1 ...>&) [with _UElements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NonNestedTuple<const tuple<_Elements ...>&>()), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1545:43:   required from ‘constexpr std::tuple<_Elements& ...> std::tie(_Elements& ...) [with _Elements = {const c10::optional<signed char>, const c10::VaryingShape<long int>, const c10::VaryingShape<long int>, const c10::optional<bool>}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/utils/hash.h:135:58:   required from ‘size_t torch::get_hash(const Types& ...) [with Types = {c10::optional<signed char>, c10::VaryingShape<long int>, c10::VaryingShape<long int>, c10::optional<bool>}; size_t = long unsigned int]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/runtime/argument_spec.h:459:240:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (5, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
/usr/include/c++/6/tuple: In instantiation of ‘static constexpr bool std::_TC<<anonymous>, _Elements>::_NonNestedTuple() [with _SrcTuple = std::tuple<const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>&&; bool <anonymous> = true; _Elements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}]’:
/usr/include/c++/6/tuple:686:422:   required by substitution of ‘template<class ... _UElements, class _Dummy, typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> > constexpr std::tuple< <template-parameter-1-1> >::tuple(std::tuple<_Args1 ...>&&) [with _UElements = {const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&}; _Dummy = void; typename std::enable_if<((std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_MoveConstructibleTuple<_UElements ...>() && std::_TC<(1ul == sizeof... (_UElements)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_ImplicitlyMoveConvertibleTuple<_UElements ...>()) && std::_TC<(std::is_same<_Dummy, void>::value && (1ul == 1)), const c10::optional<signed char>&, const c10::VaryingShape<long int>&, const c10::VaryingShape<long int>&, const c10::optional<bool>&>::_NonNestedTuple<tuple<_Elements ...>&&>()), bool>::type <anonymous> = <missing>]’
/usr/include/c++/6/tuple:1545:43:   required from ‘constexpr std::tuple<_Elements& ...> std::tie(_Elements& ...) [with _Elements = {const c10::optional<signed char>, const c10::VaryingShape<long int>, const c10::VaryingShape<long int>, const c10::optional<bool>}]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/utils/hash.h:135:58:   required from ‘size_t torch::get_hash(const Types& ...) [with Types = {c10::optional<signed char>, c10::VaryingShape<long int>, c10::VaryingShape<long int>, c10::optional<bool>}; size_t = long unsigned int]’
/home/nikolay/anaconda3/envs/psp_env/lib/python3.6/site-packages/torch/include/torch/csrc/jit/runtime/argument_spec.h:459:240:   required from here
/usr/include/c++/6/tuple:495:244: error: wrong number of template arguments (5, should be 2)
       return  __and_<__not_<is_same<tuple<_Elements...>,
                                                                                                                                                                                                                                                    ^    
/usr/include/c++/6/type_traits:1558:8: note: provided for ‘template<class _From, class _To> struct std::is_convertible’
     struct is_convertible
        ^~~~~~~~~~~~~~
ninja: build stopped: subcommand failed.

